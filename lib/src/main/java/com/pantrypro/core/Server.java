package com.pantrypro.core;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.pantrypro.common.exceptions.*;
import com.pantrypro.core.service.endpoints.GetIsPremiumEndpoint;
import com.pantrypro.core.service.endpoints.RegisterTransactionEndpoint;
import com.pantrypro.core.service.endpoints.RegisterUserEndpoint;
import com.pantrypro.model.http.client.apple.itunes.exception.AppStoreStatusResponseException;
import com.pantrypro.model.http.client.apple.itunes.exception.AppleItunesResponseException;
import com.pantrypro.model.http.server.ResponseStatus;
import com.pantrypro.model.http.server.request.AuthRequest;
import com.pantrypro.model.http.server.request.RegisterTransactionRequest;
import com.pantrypro.model.http.server.request.func.CreateRecipeIdeaRequest;
import com.pantrypro.model.http.server.response.BodyResponse;
import spark.Request;
import spark.Response;
import sqlcomponentizer.dbserializer.DBSerializerException;
import sqlcomponentizer.dbserializer.DBSerializerPrimaryKeyMissingException;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.net.URISyntaxException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;
import java.security.spec.InvalidKeySpecException;
import java.sql.SQLException;

public class Server {

    public class Func {

        /***
         * Get Recipe Idea
         *
         * Generates a recipe idea from the given ingredients and modifier text
         *
         * Request: {
         *      authToken: String - Authentication token for the user
         *      ingredients: String[] - List of ingredients to use
         *      expandIngredients: Integer - Value of 0-4 denoting how much to expand ingredients
         *      modifiers: String[] - Additional modifiers to be appended to the generation query
         * }
         *
         * Response: {
         *      Body: {
         *          name: String - Name of the recipe idea
         *          summary: String - A summary of the recipe idea
         *          cuisineType: String - A cuisine type for the recipe idea
         *          ingredients: String[] - List of ingredients needed for the recipe idea
         *          equipment: String[] - List of equipment needed for the recipe idea
         *      }
         *      Success: Integer - Integer denoting success, 1 if successful
         * }
         *
         *
         * @param request Request object given by Spark
         * @param response Response object given by Spark
         * @return Value of JSON response as String
         */
        public static String createRecipeIdea(Request request, Response response) throws IOException, MalformedJSONException {
            // Try to parse GetRecipeIdeaRequest
            CreateRecipeIdeaRequest griRequest;

            try {
                griRequest = new ObjectMapper().readValue(request.body(), CreateRecipeIdeaRequest.class);
            } catch (JsonMappingException | JsonParseException e) {
                System.out.println("Error when Getting Recipe Idea.. The request: " + request.body());
                e.printStackTrace();
                throw new MalformedJSONException("Malformed JSON - " + e.getMessage());
            }

            // Get bodyResponse with generated recipe idea



            return "";
        }

    }

    /***
     * Register User
     *
     * Registers a user to the database. This is a blank POST request and may be changed to a GET in the future.
     *
     * Request: {
     *
     * }
     *
     * Response: {
     *     Body: {
     *         authToken: String - Authentication token generated by the server
     *     }
     *     Success: Integer - Integer denoting success, 1 if successful
     * }
     *
     *
     * @param request Request object given by Spark
     * @param response Response object given by Spark
     * @return Value of JSON response as String
     */
    public static String registerUser(Request request, Response response) throws SQLException, SQLGeneratedKeyException, PreparedStatementMissingArgumentException, IOException, DBSerializerPrimaryKeyMissingException, DBSerializerException, AutoIncrementingDBObjectExistsException, IllegalAccessException, InterruptedException, InvocationTargetException {

        BodyResponse bodyResponse = RegisterUserEndpoint.registerUser();

        return new ObjectMapper().writeValueAsString(bodyResponse);
    }

    public static Object registerTransaction(Request request, Response response) throws IOException, DBSerializerException, SQLException, DBObjectNotFoundFromQueryException, InterruptedException, InvocationTargetException, IllegalAccessException, NoSuchMethodException, InstantiationException, AppStoreStatusResponseException, UnrecoverableKeyException, CertificateException, URISyntaxException, KeyStoreException, NoSuchAlgorithmException, InvalidKeySpecException, DBSerializerPrimaryKeyMissingException {
        // Parse the request
        RegisterTransactionRequest rtr = new ObjectMapper().readValue(request.body(), RegisterTransactionRequest.class);

        BodyResponse bodyResponse = RegisterTransactionEndpoint.registerTransaction(rtr);

        return new ObjectMapper().writeValueAsString(bodyResponse);
    }

    /***
     * Get Is Premium
     *
     * Gets the isPremium value for the user using latest receipt or transaction, updating with Apple if necessary
     *
     * Request: {
     *     authToken: String - Authentication token, generated from registerUser
     * }
     *
     * Response: {
     *     Body: {
     *         isPremium: Boolean - True if user is premium, false if not
     *     }
     *     Success: Integer - Integer denoting success, 1 if successful
     * }
     *
     * @param request Request object given by Spark
     * @param response Response object given by Spark
     * @return Value of JSON represented as String
     */
    public static Object getIsPremium(Request request, Response response) throws IOException, AppStoreStatusResponseException, DBSerializerPrimaryKeyMissingException, SQLException, DBObjectNotFoundFromQueryException, CertificateException, URISyntaxException, KeyStoreException, NoSuchAlgorithmException, InterruptedException, InvocationTargetException, IllegalAccessException, NoSuchMethodException, UnrecoverableKeyException, DBSerializerException, PreparedStatementMissingArgumentException, AppleItunesResponseException, InvalidKeySpecException, InstantiationException {
        // Process the request
        AuthRequest authRequest = new ObjectMapper().readValue(request.body(), AuthRequest.class);

        // Get is premium response in body response and return as string
        BodyResponse bodyResponse = GetIsPremiumEndpoint.getIsPremium(authRequest);

        return new ObjectMapper().writeValueAsString(bodyResponse);
    }


//    /***
//     * Get Remaining Chats
//     *
//     * Gets the amount of chats remaining in the day for the user for their tier.
//     *
//     * Request: {
//     *     authToken: String - Authentication token, generated from registerUser
//     * }
//     *
//     * Response: {
//     *     Body: {
//     *         remaining: Integer - The amount of chats remaining for the user for their tier
//     *     }
//     *     Success: Integer - Integer denoting success, 1 if successful
//     * }
//     *
//     * @param request Request object given by Spark
//     * @param response Response object given by Spark
//     * @return Value of JSON represented as String
//     */
//    public static Object getRemainingChats(Request request, Response response) throws IOException, DBSerializerException, SQLException, DBObjectNotFoundFromQueryException, InterruptedException, IllegalAccessException, InvocationTargetException, NoSuchMethodException, InstantiationException, AppStoreStatusResponseException, DBSerializerPrimaryKeyMissingException, UnrecoverableKeyException, CertificateException, PreparedStatementMissingArgumentException, AppleItunesResponseException, URISyntaxException, KeyStoreException, NoSuchAlgorithmException, InvalidKeySpecException {
//        // Process the request
//        AuthRequest authRequest = new ObjectMapper().readValue(request.body(), AuthRequest.class);
//
//        // Get remaining response in body response and return as string
//        BodyResponse bodyResponse = GetRemainingChatsEndpoint.getRemaining(authRequest);
//
//        return new ObjectMapper().writeValueAsString(bodyResponse);
//    }


    // --------------- //

    public static String getSimpleExceptionHandlerResponseStatusJSON(ResponseStatus status) {

        //TODO: - This is the default implementation that goes along with the app... This needs to be put as legacy and a new way of handling errors needs to be developed!
        ObjectMapper mapper = new ObjectMapper();
        ObjectNode bodyNode = mapper.createObjectNode();
        bodyNode.put("output", "There was an issue getting your chat. Please try again..."); // Move this!
        bodyNode.put("remaining", -1);
        bodyNode.put("finishReason", "");

        ObjectNode baseNode = mapper.createObjectNode();
        baseNode.put("Success", ResponseStatus.SUCCESS.Success);
        baseNode.put("Body", bodyNode);

        return baseNode.toString();
//        return "{\"Success\":" + ResponseStatus.EXCEPTION_MAP_ERROR.Success + "}";
    }

}
